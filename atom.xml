<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaozhou Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://maxiaozhou1234.github.io/"/>
  <updated>2020-02-12T12:00:10.281Z</updated>
  <id>https://maxiaozhou1234.github.io/</id>
  
  <author>
    <name>ma xiaozhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【java】NIO 小结</title>
    <link href="https://maxiaozhou1234.github.io/java/java-nio/"/>
    <id>https://maxiaozhou1234.github.io/java/java-nio/</id>
    <published>2020-02-11T09:15:45.000Z</published>
    <updated>2020-02-12T12:00:10.281Z</updated>
    
    <content type="html"><![CDATA[<p>java NIO 学习后的小结</p><h3 id="1-NIO-总述"><a href="#1-NIO-总述" class="headerlink" title="1. NIO 总述"></a>1. NIO 总述</h3><p>nio 为 Non-blocking io，即不阻塞io操作，java在为并发提供的 io 操作类，主要有三个核心类，分别为：</p><ul><li>Channel 操作数据通道</li><li>Buffer 缓冲数据区域</li><li>Selector 用于管理 channel</li></ul><h3 id="2-BIO-与-NIO-的主要区别"><a href="#2-BIO-与-NIO-的主要区别" class="headerlink" title="2. BIO 与 NIO 的主要区别"></a>2. BIO 与 NIO 的主要区别</h3><h4 id="2-1-面向操作"><a href="#2-1-面向操作" class="headerlink" title="2.1 面向操作"></a>2.1 面向操作</h4><p>BIO 是面向流操作，NIO 是面向缓冲操作。BIO 每次从流读写一个或多个字节，直至所有字节被读写完成，该过程数据没有被缓存到其它地方，它不能前后移动流中的数据。</p><p>NIO 将数据先缓冲到稍后处理的区域，需要时可以在缓冲区前后移动，具备处理过程中的灵活性。</p><h4 id="2-2-阻塞与非阻塞"><a href="#2-2-阻塞与非阻塞" class="headerlink" title="2.2 阻塞与非阻塞"></a>2.2 阻塞与非阻塞</h4><p>Java IO 流失阻塞的，意味着，当线程调用 read（）或 write（）时，该线程被阻塞，直到数据完全读取或者写入，期间线程无法进行其它处理。</p><p>NIO 的非阻塞模式，可以让线程请求写入一些数据到某通道，但不需要等到操作完成，这个现场同时可以去做其他事情。线程通常将非阻塞IO空闲时间用于其他通道上执行IO操作，所以一个线程可以管理多个输入、输出通道。</p><h4 id="2-3-选择器"><a href="#2-3-选择器" class="headerlink" title="2.3 选择器"></a>2.3 选择器</h4><p>NIO 的选择器允许一个单独线程监视多个输入通道，可以注册多个通道使用一个选择器，然后监控可以处理的输入通道进行操作。</p><h3 id="3-NIO-中的-channel"><a href="#3-NIO-中的-channel" class="headerlink" title="3. NIO 中的 channel"></a>3. NIO 中的 channel</h3><h4 id="3-1-FileChannel"><a href="#3-1-FileChannel" class="headerlink" title="3.1 FileChannel"></a>3.1 FileChannel</h4><p>FileChannel 可以通过 <code>RandomAccessFile.getChannel()</code> 或 <code>InputStream,OutputStream .getChannel()</code> 获取，示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">channelCopy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Instant begin = Instant.now();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        RandomAccessFile source = <span class="keyword">new</span> RandomAccessFile(<span class="string">"./res/threeWithoutPunctuation"</span>, <span class="string">"r"</span>);</span><br><span class="line">        RandomAccessFile target = <span class="keyword">new</span> RandomAccessFile(<span class="string">"./res/copyFileNio"</span>, <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>*<span class="number">8</span>);</span><br><span class="line">        FileChannel sourceChannel = source.getChannel();</span><br><span class="line">        FileChannel targetChannel = target.getChannel();</span><br><span class="line">        <span class="keyword">while</span> (sourceChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">                targetChannel.write(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        sourceChannel.close();</span><br><span class="line">        targetChannel.close();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"[channelCopy] Done &gt;&gt; "</span> + (Duration.between(begin, Instant.now()).toMillis()) + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">测试在小文件复制速度可能不如流操作，但在大文件拷贝速度比流复制快，测试拷贝<span class="number">1.03</span>G文件，channel 耗时 <span class="number">1.08</span>s，而 stream 需要 <span class="number">11.31</span>s。</span><br><span class="line"></span><br><span class="line">#### 3.2 DatagramChannel</span><br><span class="line">DatagramChannel 广播包的操作，区别不大，示例代码如下：</span><br><span class="line"></span><br><span class="line">服务端</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">private</span> SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.getDefault());</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DatagramChannel datagramChannel = DatagramChannel.open();</span><br><span class="line">        datagramChannel.configureBlocking(<span class="keyword">true</span>);</span><br><span class="line">        datagramChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8000</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"启动服务端"</span>);</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        SocketAddress socketAddress;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//超过buffer大小部分将被丢弃</span></span><br><span class="line">            <span class="keyword">if</span> ((socketAddress = datagramChannel.receive(buffer)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                buffer.flip();</span><br><span class="line">                System.out.println(Charset.forName(<span class="string">"UTF-8"</span>).decode(buffer));</span><br><span class="line">                buffer.clear();</span><br><span class="line">                datagramChannel.send(Charset.forName(<span class="string">"UTF-8"</span>).encode(<span class="string">"服务端已收到["</span> + format.format(<span class="keyword">new</span> Date())), socketAddress);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DatagramNioClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DatagramChannel datagramChannel = DatagramChannel.open();</span><br><span class="line">        datagramChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8001</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (datagramChannel.receive(buffer) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        System.out.print(<span class="string">"收到消息："</span>);</span><br><span class="line">                        System.out.println(Charset.forName(<span class="string">"UTF-8"</span>).decode(buffer));</span><br><span class="line">                        buffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"启动客户端"</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            send(datagramChannel, scanner.nextLine());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DatagramChannel datagramChannel, String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        datagramChannel.send(Charset.forName(<span class="string">"UTF-8"</span>).encode(msg), <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8000</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需注意，如果接收数据超过设定容器的大小，超过部分会丢弃。比如对方发送了128K数据，而我容器只有48K大小，那么我只接收到48K数据，而剩余部分直接被丢弃。</p><p>对于数据的读取可以传入 ByteBuffer[] 数据，将按照顺序进行填充，对于一些固定大小数据头的数据包，使用非常方便，缺点容量一旦确定不可修改，弹性差，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    DatagramChannel datagramChannel = DatagramChannel.open();</span><br><span class="line">    datagramChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,<span class="number">8001</span>));</span><br><span class="line">    ByteBuffer headBuffer = ByteBuffer.allocate(<span class="number">48</span>);</span><br><span class="line">    ByteBuffer bodyBuffer = ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">    datagramChannel.read(<span class="keyword">new</span> ByteBuffer[]&#123;headBuffer,bodyBuffer&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>connect</code> 并非真正的建立连接，而是锁定 channel 通道，让该通道只能通过特定的地址收发数据。 </p><h4 id="3-3-SocketChannel-ServerSocketChannel"><a href="#3-3-SocketChannel-ServerSocketChannel" class="headerlink" title="3.3 SocketChannel,ServerSocketChannel"></a>3.3 SocketChannel,ServerSocketChannel</h4><p>这两个 SocketChannel 是 socket 的并发版本，通常我们通过 <code>ServerSocket</code> 来监听端口，一旦有客户端连接，就创建线程进行通信，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8000</span>);</span><br><span class="line">    Socket socket;</span><br><span class="line">    <span class="keyword">while</span> ((socket = serverSocket.accept()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> Socket ss = socket;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                InputStream in = ss.getInputStream();</span><br><span class="line">                OutputStream out = ss.getOutputStream();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一次连接都需要创建线程进行通信，所以服务端线程数与客户端数量呈1:1关系，线程的创建需要消耗服务器资源，而服务器资源有限，在并发高且传输数据小的环境，这种方式无法满足要求。</p><p>SocketChannel 能够很好的解决高并发下的资源问题，通过 Selector 注册后，在非阻塞模式下仅使用单线程可以管理多个通道并实现数据传输，服务端示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立服务端监听，设置为非阻塞模式</span></span><br><span class="line">    ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">    serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">    serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8000</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 channel 注册到 selector</span></span><br><span class="line">    Selector selector = Selector.open();</span><br><span class="line">    serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">//检查是否有可处理通道</span></span><br><span class="line">        <span class="keyword">int</span> num = selector.select();</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">continue</span>;<span class="comment">//jdk 中空转有一定几率造成 cpu 100%，属于系统bug，需谨慎</span></span><br><span class="line"></span><br><span class="line">        Set&lt;SelectionKey&gt; set = selector.selectedKeys();</span><br><span class="line">        Iterator&lt;SelectionKey&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            SelectionKey key = it.next();</span><br><span class="line"></span><br><span class="line">            it.remove();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (key.isAcceptable()) &#123;<span class="comment">//把通道注册为可读</span></span><br><span class="line"></span><br><span class="line">                ServerSocketChannel channel = (ServerSocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line">                SocketChannel acceptChannel = channel.accept();</span><br><span class="line">                acceptChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                acceptChannel.register(selector,SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;<span class="comment">//处理已连接 channel 数据</span></span><br><span class="line">                SocketChannel channel = (SocketChannel) key.channel();</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                channel.read(buffer);</span><br><span class="line">                System.out.println(Charset.forName(<span class="string">"UTF-8"</span>).decode(buffer));</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">channel.write(Charset.forName(<span class="string">"UTF-8"</span>).encode(<span class="string">"回复"</span>));</span><br><span class="line">                channel.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出，SocketChannel 在并发量大处理的优越性。</p><p>如果是需要管理成千上万个连接，并且这些连接每次只是发送少量的数据，如聊天服务器这类需求，实现NIO服务器可能是一个优势，但如果是少量连接使用，一次发送大量数据，还是典型的IO服务器实现更符合要求。</p><p>当然 SocketChannel 还是存在缺点，比如注释中写到可能出现cpu占用100%的bug（说已修复但仍有小概率出现），api使用比较复杂，但对于小型的服务处理，NIO服务器仍然是一个高效可用的实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java NIO 学习后的小结&lt;/p&gt;
&lt;h3 id=&quot;1-NIO-总述&quot;&gt;&lt;a href=&quot;#1-NIO-总述&quot; class=&quot;headerlink&quot; title=&quot;1. NIO 总述&quot;&gt;&lt;/a&gt;1. NIO 总述&lt;/h3&gt;&lt;p&gt;nio 为 Non-blocking io
      
    
    </summary>
    
    
      <category term="java" scheme="https://maxiaozhou1234.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://maxiaozhou1234.github.io/tags/java/"/>
    
      <category term="nio" scheme="https://maxiaozhou1234.github.io/tags/nio/"/>
    
  </entry>
  
  <entry>
    <title>【其他】gittalk 配置问题</title>
    <link href="https://maxiaozhou1234.github.io/default/gittalk/"/>
    <id>https://maxiaozhou1234.github.io/default/gittalk/</id>
    <published>2020-02-11T06:58:05.000Z</published>
    <updated>2020-02-12T12:00:10.280Z</updated>
    
    <content type="html"><![CDATA[<p>使用 gittalk 为 Hexo 添加评论功能，遇到问题及解决方法</p><h3 id="1-申请及配置"><a href="#1-申请及配置" class="headerlink" title="1.申请及配置"></a>1.申请及配置</h3><h4 id="1-1-注册-gittalk"><a href="#1-1-注册-gittalk" class="headerlink" title="1.1 注册 gittalk"></a>1.1 注册 gittalk</h4><p>可通过 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">Register a new OAuth application</a> 进行注册。如果已经注册过，可以在 github 首页点击头像下拉，“Settings – Developer settings – OAuth Apps” 查看你的app，选择你注册的 app 进行再次编辑。</p><h4 id="1-2-配置填写"><a href="#1-2-配置填写" class="headerlink" title="1.2 配置填写"></a>1.2 配置填写</h4><ul><li><p>Application name： 应用名称，随意</p></li><li><p>Homepage URL： 网站URL，对应自己博客地址</p></li><li><p>Application description ：描述，随意</p></li><li><p>Authorization callback URL：# 网站URL，博客地址就好</p></li><li><p>点击注册，页面会出现其中Client ID和Client Secret在后面的配置中需要用到</p></li></ul><p>如我的 gittalk 填写如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application name： CommentApp</span><br><span class="line">Homepage URL： https:&#x2F;&#x2F;maxiaozhou1234.github.io # 网站URL，对应自己博客地址</span><br><span class="line">Application description ：repo # 描述，随意</span><br><span class="line">Authorization callback URL：https:&#x2F;&#x2F;maxiaozhou1234.github.io # 网站URL，博客地址就好，如果有独立域名，可填写你的域名用于跳转</span><br></pre></td></tr></table></figure><h4 id="1-3-在主题的-config-yml-进行配置"><a href="#1-3-在主题的-config-yml-进行配置" class="headerlink" title="1.3 在主题的 _config.yml 进行配置"></a>1.3 在主题的 _config.yml 进行配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Cmments</span><br><span class="line">comment:</span><br><span class="line">  gitalk:</span><br><span class="line">    enable: true ## 开启gitalk</span><br><span class="line">    owner: ## GitHub的用户名</span><br><span class="line">    repo: ## 此评论存放的GitHub仓库</span><br><span class="line">    client_id: ## 复制刚才生成的clientID，例如. 75752dafe7907a897619</span><br><span class="line">    client_secret: ## 复制刚才生成的clientSecret，例如. ec2fb9054972c891289640354993b662f4cccc50</span><br><span class="line">    admin: ## Github的用户名</span><br><span class="line">id: location.pathname</span><br><span class="line">    language: zh-CN ## Language</span><br><span class="line">    pagerDirection: last # Comment sorting direction, available values are last and first.</span><br></pre></td></tr></table></figure><p>主题的配置，可以参考<a href="https://chaooo.github.io/article/20161229.html" target="_blank" rel="noopener">【Hexo博客折腾】BlueLake博客主题的详细配置</a></p><h3 id="2-搭建过程遇到的问题"><a href="#2-搭建过程遇到的问题" class="headerlink" title="2. 搭建过程遇到的问题"></a>2. 搭建过程遇到的问题</h3><h4 id="2-1-评论区显示-Error-Not-Found"><a href="#2-1-评论区显示-Error-Not-Found" class="headerlink" title="2.1 评论区显示 Error: Not Found"></a>2.1 评论区显示 Error: Not Found</h4><p>遇到 Error: Not Found，这个问题是主题 _config.yml 中 gittalk 配置中 repo 填写错误，修改为你的博客主页即可，如我的博客配置如下：</p><blockquote><p>repo： maxiaozhou1234.github.io</p></blockquote><h4 id="2-2-博客评论登录跳转到首页问题"><a href="#2-2-博客评论登录跳转到首页问题" class="headerlink" title="2.2 博客评论登录跳转到首页问题"></a>2.2 博客评论登录跳转到首页问题</h4><p>申请配置是填写的<code>Homepage URL</code>,<code>Authorization callback URL</code> 不正确导致，第一个填博客首页，第二个是授权回调页面，因为我没有使用独立的域名，所以两个都填博客首页，如下</p><blockquote><p>Homepage URL：<a href="https://maxiaozhou1234.github.io">https://maxiaozhou1234.github.io</a><br>Authorization callback URL：<a href="https://maxiaozhou1234.github.io">https://maxiaozhou1234.github.io</a></p></blockquote><p>如果你是有自己独立的域名，将 <code>Authorization callback URL</code> 填写为你的域名，前提是你已完成了域名的绑定，还有注意 https 和 http 区别，需完全一致。</p><p>参考文章：<a href="https://blog.csdn.net/w47_csdn/article/details/88858343" target="_blank" rel="noopener">解决配置gitalk插件后初始化登录时跳转回首页</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 gittalk 为 Hexo 添加评论功能，遇到问题及解决方法&lt;/p&gt;
&lt;h3 id=&quot;1-申请及配置&quot;&gt;&lt;a href=&quot;#1-申请及配置&quot; class=&quot;headerlink&quot; title=&quot;1.申请及配置&quot;&gt;&lt;/a&gt;1.申请及配置&lt;/h3&gt;&lt;h4 id=&quot;1-1
      
    
    </summary>
    
    
      <category term="default" scheme="https://maxiaozhou1234.github.io/categories/default/"/>
    
    
      <category term="gittalk" scheme="https://maxiaozhou1234.github.io/tags/gittalk/"/>
    
      <category term="hexo" scheme="https://maxiaozhou1234.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
